package com.coby.talentbuddy;

//import 
public class CountOccurence {

	/**
	 * @param args
	 */
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Integer[] v = {1, 1, 2, 2, 2, 2, 2, 7, 7, 7, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 22, 22, 22, 25, 25, 27, 27, 27, 27, 27, 27, 27, 27, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 47, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 61, 61, 61, 61, 61, 61, 67, 67, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 82, 82, 84, 84, 86, 86, 86, 86, 86, 86, 86, 93, 93, 93, 93, 93, 93, 93, 100, 100, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 119, 119, 121, 121, 123, 123, 123, 126, 126, 126, 126, 126, 126, 126, 126, 126, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 161, 161, 161, 161, 161, 161, 161, 161, 161, 170, 170, 172, 172, 174, 174, 176, 177, 177, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 192, 193, 193, 193, 193, 197, 197, 197, 197, 197, 202, 202, 202, 202, 206, 206, 206, 209, 209, 209, 212, 213, 213, 213, 213, 213, 213, 213, 213, 221, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 236, 236, 236, 236, 236, 236, 236, 236, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 270, 270, 270, 270, 270, 270, 270, 270, 270, 279, 280, 280, 280, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 294, 294, 294, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 327, 327, 327, 327, 327, 327, 327, 327, 327, 327, 337, 337, 337, 337, 337, 337, 337, 337, 337, 346, 346, 346, 346, 346, 351, 351, 351, 351, 351, 356, 357, 357, 357, 357, 361, 362, 362, 362, 362, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 400, 400, 400, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 413, 414, 414, 414, 414, 414, 414, 414, 414, 414, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 440, 441, 441, 441, 441, 441, 441, 441, 448, 448, 448, 448, 448, 448, 448, 448, 456, 457, 457, 457, 457, 461, 461, 461, 464, 464, 464, 464, 464, 464, 464, 464, 464, 464, 464, 464, 476, 476, 476, 476, 476, 476, 476, 476, 476, 476, 476, 476, 476, 476, 476, 476, 492, 492, 492, 492, 492, 492, 492, 492, 492, 492, 492, 503, 503, 503, 503, 503, 503, 509, 510, 510, 510, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 525, 525, 525, 525, 525, 525, 525, 525, 525, 525, 525, 525, 525, 525, 525, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 551, 552, 553, 553, 553, 553, 553, 553, 559, 559, 559, 562, 562, 562, 562, 562, 562, 568, 568, 570, 570, 570, 570, 570, 570, 576, 576, 578, 578, 578, 578, 578, 578, 584, 584, 584, 584, 584, 584, 584, 584, 584, 593, 593, 593, 593, 593, 593, 599, 599, 599, 599, 599, 599, 599, 606, 606, 606, 606, 610, 610, 610, 610, 610, 610, 610, 610, 610, 610, 610, 610, 610, 610, 624, 624, 626, 627, 627, 627, 627, 627, 632, 632, 634, 634, 634, 634, 634, 634, 634, 634, 634, 634, 634, 634, 634, 647, 647, 647, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 662, 663, 663, 663, 663, 663, 668, 668, 668, 668, 668, 673, 674, 675, 676, 676, 676, 676, 676, 676, 676, 676, 676, 676, 676, 676, 676, 676, 676, 676, 676, 693, 693, 695, 695, 695, 695, 695, 695, 695, 702, 702, 702, 705, 705, 707, 707, 707, 707, 707, 707, 707, 714, 715, 715, 715, 715, 715, 715, 715, 722, 722, 722, 725, 726, 726, 726, 726, 726, 731, 731, 733, 733, 733, 736, 736, 736, 736, 736, 736, 742, 743, 744, 744, 746, 746, 746, 746, 750, 750, 750, 750, 754, 754, 754, 754, 758, 759, 759, 759, 759, 759, 759, 759, 759, 759, 759, 759, 759, 759, 759, 759, 774, 775, 775, 775, 775, 779, 779, 779, 779, 779, 779, 779, 779, 779, 779, 779, 790, 790, 790, 790, 794, 794, 796, 797, 797, 799, 799, 799, 799, 799, 804, 805, 805, 805, 808, 808, 808, 808, 808, 808, 808, 808, 816, 816, 816, 816, 816, 816, 816, 816, 816, 816, 816, 816, 828, 828, 828, 828, 828, 833, 833, 833, 836, 836, 836, 836, 836, 836, 836, 836, 836, 836, 846, 846, 846, 846, 846, 846, 846, 846, 846, 846, 846, 846, 846, 846, 846, 861, 861, 861, 861, 861, 866, 866, 866, 866, 866, 866, 866, 866, 874, 874, 874, 874, 874, 874, 874, 874, 874, 874, 884, 884, 886, 886, 886, 886, 886, 886, 892, 892, 892, 892, 892, 892, 892, 892, 900, 900, 902, 902, 902, 902, 902, 907, 907, 907, 907, 907, 907, 913, 913, 913, 913, 913, 913, 913, 920, 921, 921, 923, 923, 923, 923, 923, 923, 923, 923, 931, 931, 931, 934, 935, 935, 935, 938, 938, 938, 938, 938, 938, 938, 938, 946, 946, 946, 946, 946, 946, 952, 952, 952, 952, 956, 957, 957, 957, 957, 957, 957, 957, 957, 957, 957, 957, 957, 957, 970, 970, 970, 970, 970, 970, 970, 970, 970, 970, 970, 970, 970, 970, 970, 970, 970, 970, 970, 970, 970, 970, 970, 970, 970, 995, 995, 995, 995, 995};
		count_occurences(v, 828);
	}
	
    public static void count_occurences(Integer[] v, Integer k) {
        // Write your code here
        // To print results to the standard output please use System.out.println
        // Example: System.out.println("Hello world!");
        int step = v.length / 4;
        int start_ind = v.length / 2;
        int end_ind = v.length / 2;
        while (!(start_ind <= 0 || (v[start_ind].equals(k) && !v[start_ind - 1].equals(k)))) {
            System.out.println("start " + start_ind + " step " + step + " " + v[start_ind] + " " + v[start_ind - 1] + " " +  (v[start_ind].equals(k) ));
        	if(v[start_ind] < k) {
                start_ind += step;
                step = step / 2;
                if(step == 0) step = 1;
            } else {
                start_ind -= step;
                step = step / 2;
                if(step == 0) step = 1;
            }
        }
        step = v.length/4;
        while (!(end_ind >= v.length - 1 || (v[end_ind].equals(k) && !v[end_ind + 1].equals(k)))) {
        	System.out.println("end " + end_ind + " step " + step);
        	if(v[end_ind] > k) {
        		end_ind -= step;
        		step = step / 2;
                if(step == 0) step = 1;
            } else {
            	end_ind += step;
            	step = step / 2;
                if(step == 0) step = 1;
            }
        }
        System.out.println(end_ind - start_ind + 1);
    }

}
